{"name":"Git2docker.io","tagline":"","body":"###﻿Git2Docker – Server\r\n\r\n##About:\r\n\r\nGit2Docker.io Deploys apps and manages Containers with best practices right out of the box. Automatically doing all the things that were too complicated, expensive, or time consuming to do manually. And because it's open source.\r\n\r\nGit2docker is a software to simplify, you just need a git client, with git2docker you don't need install any other tools, You can Deploy, Delete, Shutdown, Start, View Logs and more.\r\n\r\n- Install\r\n\r\nOS: Opensuse 13.2\r\n\r\n```\r\nzypper install docker\r\nsystemctl enable docker\r\nsystemctl start docker\r\nsystemctl enable sshd\r\nsystemctl start sshd\r\n```\r\n_Disable the Firewall_.\r\n\r\n```\r\nyast firewall disable\r\n```\r\n\r\n- Installing - Git2Docker\r\n\r\n```\r\ncurl https://raw.githubusercontent.com/cooltrick/git2docker.io/master/install.sh | sh\r\n```\r\n\r\n- Installing from Source.\r\n\r\n```\r\nzypper install go\r\n\r\ngit clone https://github.com/cooltrick/git2docker.io.git\r\ncd git2docker.io\r\nmake\r\nsudo make install\r\n\r\ndocker pull cooltrick/git2docker\r\ndocker pull cooltrick/git2docker:start\r\ndocker pull busybox\r\ndocker pull cooltrick/nginx-proxy\r\n```\r\n\r\n- Creating the user:\r\n\r\n```\r\nuseradd -m user\r\ngpasswd -a user docker\r\npasswd user\r\n```\r\n###﻿Git2Docker – Client\r\n\r\n```\r\nmkdir ~/.git2docker\r\nssh-keygen\r\ncat ~/.ssh/id_rsa.pub | ssh user@192.168.100.56 git2docker\r\n```\r\n\r\n - Downloading and installing the g2docker cli.\r\n\r\n```\r\ncurl https://raw.githubusercontent.com/cooltrick/git2docker.io/master/git2docker-client/linux/g2docker -o g2docker\r\nchmod +x g2docker\r\n\r\ncat >  ~/.git2docker/git2docker.conf <<EOF\r\nuser=user\r\nhost=192.168.100.56\r\nEOF\r\n\r\n```\r\n\r\n- Installing g2docker cli from Source.\r\n\r\n```\r\nzypper install go\r\n\r\ngit clone https://github.com/cooltrick/git2docker.io.git\r\ncd git2docker.io/git2docker-client/linux\r\nmake\r\nchmod +x g2docker\r\ncp -rf g2docker /usr/local/bin\r\n\r\ncat >  ~/.git2docker/git2docker.conf <<EOF\r\nuser=user\r\nhost=192.168.100.56\r\nEOF\r\n```\r\n\r\n\r\n###About git2docker.conf\r\n\r\nThe file git2docker.conf is necessary, the server read the file and get needed options to work.\r\n\r\n**git2docker.conf**:\r\n\r\nstate options:\r\n\r\n- build - Build the application using the source code.\r\n- build:logs - Build the application using the source code and start the container showing logs.\r\n- delete or remove - Stop and remove the Container\r\n- stop - Stop the Container\r\n- start - Start a stoped Container\r\n- start:logs - Start a stoped Container and show logs\r\n- logs - Show logs of a Started Container\r\n- dockerfile or Dockerfile - Force the git2docker to use a Dockerfile\r\n\r\n\r\nexample:\r\n\r\n```\r\nstate=build\r\n```\r\n\r\ndomain option:\r\n> Provided your DNS is setup to forward your domain to the a host running nginx-proxy, the request will be routed to a container with the domain setted in git2docker.conf.\r\n\r\n\r\nexample:\r\n```\r\ndomain=app.linux.site\r\n```\r\n\r\npre-exec option:\r\n\r\n>Option used to execute a command before start the application.\r\n\r\nexample:\r\n```\r\npre-exec=bundle exec rake db:create db:migrate db:seed\r\n```\r\n\r\ngit Option:\r\n\r\n> If you have your code at an external repository like github, git2docker will download and deploy the application.\r\n\r\nexample:\r\n```\r\ngit=https://github.com/heroku/node-js-sample\r\n```\r\n\r\n\r\nExemple of git2docker.conf\r\n\r\n```\r\nstate=build\r\ndomain=app.domain.lnx\r\npre-exec=bundle exec rake db:create db:migrate db:seed\r\n```\r\n\r\n###Deploy:\r\n\r\nWe will deploy a Node.js example application which starts a minimal HTTP server.\r\n```\r\ngit clone https://github.com/heroku/node-js-sample\r\ncd node-js-sample\r\ngit init\r\n\r\necho state=build > git2docker.conf\r\ngit add --all\r\ngit commit -m \"build\"\r\ngit remote add git2docker user@192.168.100.56:node-js-sample\r\n\r\ngit push git2docker master\r\n```\r\n\r\n```\r\n@linux:/tmp/node-js-sample> git push git2docker master\r\nCounting objects: 391, done.\r\nDelta compression using up to 4 threads.\r\nCompressing objects: 100% (316/316), done.\r\nWriting objects: 100% (391/391), 214.55 KiB | 0 bytes/s, done.\r\nTotal 391 (delta 46), reused 387 (delta 45)\r\nremote: =======> Working - node-js-sample\r\nremote:\r\n-----> Using u1000 to run an application\r\n-----> Node.js app detected\r\n\r\n-----> Reading application state\r\n       package.json...\r\n       build directory...\r\n       cache directory...\r\n       environment variables...\r\n\r\n       Node engine:         0.12.x\r\n       Npm engine:          unspecified\r\n       Start mechanism:     npm start\r\n       node_modules source: npm-shrinkwrap.json\r\n       node_modules cached: false\r\n\r\n       NPM_CONFIG_PRODUCTION=true\r\n       NODE_MODULES_CACHE=true\r\n\r\n-----> Installing binaries\r\n       Resolving node version 0.12.x via semver.io...\r\n       Downloading and installing node 0.12.2...\r\n       Using default npm version: 2.7.4\r\n\r\n-----> Building dependencies\r\n       Installing node modules\r\n       express@4.12.3 node_modules/express\r\n       ├── merge-descriptors@1.0.0\r\n       ├── utils-merge@1.0.0\r\n       ├── cookie-signature@1.0.6\r\n       ├── methods@1.1.1\r\n       ├── fresh@0.2.4\r\n       ├── escape-html@1.0.1\r\n       ├── cookie@0.1.2\r\n       ├── range-parser@1.0.2\r\n       ├── content-type@1.0.1\r\n       ├── finalhandler@0.3.4\r\n       ├── vary@1.0.0\r\n       ├── parseurl@1.3.0\r\n       ├── serve-static@1.9.2\r\n       ├── content-disposition@0.5.0\r\n       ├── path-to-regexp@0.1.3\r\n       ├── depd@1.0.1\r\n       ├── qs@2.4.1\r\n       ├── etag@1.5.1 (crc@3.2.1)\r\n       ├── on-finished@2.2.0 (ee-first@1.1.0)\r\n       ├── debug@2.1.3 (ms@0.7.0)\r\n       ├── proxy-addr@1.0.7 (forwarded@0.1.0, ipaddr.js@0.1.9)\r\n       ├── send@0.12.2 (destroy@1.0.3, ms@0.7.0, mime@1.3.4)\r\n       ├── accepts@1.2.5 (negotiator@0.5.1, mime-types@2.0.10)\r\n       └── type-is@1.6.1 (media-typer@0.3.0, mime-types@2.0.10)\r\n\r\n-----> Checking startup method\r\n       No Procfile; Adding 'web: npm start' to new Procfile\r\n\r\n-----> Finalizing build\r\n       Creating runtime environment\r\n       Exporting binary paths\r\n       Cleaning npm artifacts\r\n       Cleaning previous cache\r\n       Caching results for future builds\r\n\r\n-----> Build succeeded!\r\n\r\n       node-js-sample@0.2.0 /tmp/build\r\n       └── express@4.12.3\r\n\r\n-----> Discovering process types\r\n       Procfile declares types -> web\r\nremote: node-js-sample Started\r\nremote: 49153\r\nTo demo@localhost:node-js-sample\r\n* [new branch]      master -> master\r\n\r\n\r\n\r\n@linux:/tmp/node-js-sample> curl http://192.168.100.56:49153/\r\nHello World!\r\n```\r\n\r\n###Deploy - Using a Dockerfile\r\n\r\nWe will deploy a Apache(httpd) example application.\r\n\r\n```\r\nmkdir apache-demo\r\ncd apache-demo\r\n\r\necho \"FROM httpd:2.4\" > Dockerfile\r\necho \"EXPOSE 80\" >> Dockerfile\r\n\r\necho state=dockerfile > git2docker.conf\r\n\r\ngit add --all\r\ngit commit -m \"build\"\r\ngit remote add git2docker user@192.168.100.56:apache-demo\r\n\r\ngit push git2docker master\r\n```\r\n```\r\n@linux:/tmp/apache-demo> git push git2docker master\r\nCounting objects: 4, done.\r\nDelta compression using up to 4 threads.\r\nCompressing objects: 100% (2/2), done.\r\nWriting objects: 100% (4/4), 303 bytes | 0 bytes/s, done.\r\nTotal 4 (delta 0), reused 0 (delta 0)\r\nremote: =======> Working - apache-demo\r\nremote:\r\nremote: Sending build context to Docker daemon 3.072 kB\r\nremote: Sending build context to Docker daemon\r\nremote: Step 0 : FROM httpd:2.4\r\nremote:  ---> 4ea677a2d898\r\nremote: Step 1 : EXPOSE 80\r\nremote:  ---> Running in 2fe3a7300cdf\r\nremote:  ---> 11d40bb1d4fe\r\nremote: Removing intermediate container 2fe3a7300cdf\r\nremote: Successfully built 11d40bb1d4fe\r\nremote: apache-demo Started\r\nremote: 49154\r\nTo demo@localhost:apache-demo\r\n * [new branch]      master -> master\r\n\r\n\r\n@linux:/tmp/node-js-sample> curl http://192.168.100.56:49154/\r\nIt works!\r\n```\r\n\r\n###Manage Containers - Git Client\r\n\r\n- Deleting:\r\n\r\n```\r\necho state=remove > git2docker.conf\r\ngit add --all\r\ngit commit -m \"build\"\r\ngit push git2docker master\r\n\r\n```\r\n\r\n- Stoping:\r\n\r\n```\r\necho state=stop > git2docker.conf\r\ngit add --all\r\ngit commit -m \"build\"\r\ngit push git2docker master\r\n\r\n```\r\n\r\n- Starting:\r\n\r\n```\r\necho state=start > git2docker.conf\r\ngit add --all\r\ngit commit -m \"build\"\r\ngit push git2docker master\r\n\r\n```\r\n\r\n- Logs:\r\n\r\n```\r\necho state=logs > git2docker.conf\r\ngit add --all\r\ngit commit -m \"build\"\r\ngit push git2docker master\r\n\r\n```\r\n\r\n###Manage Containers - Git2Docker-CLI Client\r\n\r\n- Listing:\r\n\r\n```\r\n\r\ng2docker -ps\r\n| apache-demo                    is Up |\r\n```\r\n\r\n- Stopting:\r\n\r\n```\r\n\r\ng2docker -stop --name=apache-demo\r\n| apache-demo                   Stoped |\r\n```\r\n\r\n- Starting:\r\n\r\n```\r\n\r\ng2docker -start --name=apache-demo\r\n| apache-demo                  Started |\r\n```\r\n\r\n- Logs:\r\n\r\n```\r\n\r\ng2docker -logs --name=apache-demo\r\n172.17.0.3 - - [16/Apr/2015:15:08:45 +0000] \"GET / HTTP/1.1\" 200 22698 \"-\" \"\r\n172.17.0.3 - - [16/Apr/2015:15:08:45 +0000] \"GET / HTTP/1.1\" 200 22698 \"-\" \"\r\n172.17.0.3 - - [16/Apr/2015:15:08:45 +0000] \"GET / HTTP/1.1\" 200 22698 \"-\" \"\r\n172.17.0.3 - - [16/Apr/2015:15:08:45 +0000] \"GET / HTTP/1.1\" 200 22698 \"-\" \"\r\n172.17.0.3 - - [16/Apr/2015:15:08:45 +0000] \"GET / HTTP/1.1\" 200 22698 \"-\" \"\r\n172.17.0.3 - - [16/Apr/2015:15:08:45 +0000] \"GET / HTTP/1.1\" 200 22698 \"-\" \"\r\n```\r\n\r\n- Deleting:\r\n\r\n```\r\ng2docker -remove --name=apache-demo\r\nPlease type yes or no and then press enter: yes\r\n| apache-demo                  Deleted |\r\n```\r\n\r\n- Get Environment Variables:\r\n\r\n```\r\ng2docker -env --name=apache-demo\r\n\r\n\r\n\r\n```\r\n\r\n####Nginx proxy:\r\n\r\n>If you not set the domain option, the nginx-proxy will publish the domain using appname.username\r\n\r\n- Create a systemd service:\r\n\r\n```\r\ncd /etc/systemd/system\r\n\r\ncat >  nginx-proxy.service  <<EOF\r\n[Unit]\r\nDescription=nginx-proxy\r\nAfter=docker.service\r\nRequires=docker.service\r\n\r\n[Service]\r\nTimeoutStartSec=0\r\nExecStartPre=-/usr/bin/docker kill nginx-proxy\r\nExecStartPre=-/usr/bin/docker rm nginx-proxy\r\nExecStart=/usr/bin/docker run -d --name=nginx-proxy -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock cooltrick/nginx-proxy\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n```\r\n\r\n - Enable and Start service:\r\n\r\n```\r\nsystemctl enable /etc/systemd/system/nginx-proxy.service\r\nsystemctl start nginx-proxy.service\r\n```\r\n\r\nDeploy any Container setting domain option in git2docker.conf and test.\r\n\r\n>If you haven't a DNS server, You can add the domain at /etc/hosts.\r\n\r\nExample of /etc/hosts file:\r\n```\r\n192.168.100.56       apache-demo.git2docker\r\n192.168.100.56       nodejs.git2docker\r\n```\r\n\r\n##Integration with Databases:\r\n\r\n###Suported Databases:\r\n\r\n* Redis\r\n* Mysql\r\n* Postgresql - _In Development_\r\n\r\n##Deploy Database:\r\n\r\nTo deploy database just create a git2docker_db.conf file.\r\n\r\ngit2docker_db.conf Examples:\r\n\r\nRedis Example:\r\n\r\n```\r\nimage=redis\r\n\r\n```\r\n\r\nMysql Example:\r\n\r\n```\r\nimage=mysql\r\nuser=dbuser\r\npassword=dbpass\r\ndatabase=dbname\r\n```\r\n\r\n\r\nPostgresql Example:\r\n\r\n```\r\nimage=mysql\r\nuser=dbuser\r\npassword=dbpass\r\ndatabase=dbname\r\n```\r\n\r\n##Deploy Application using Database:\r\n\r\nDatabase Server Address aways be **\"database\"**\r\n\r\nExample:\r\n\r\nPHP with Mysql Using Dockerfile:\r\n\r\n```\r\nmkdir demo-php\r\ncd demo-php\r\n```\r\n\r\n* Dockerfile:\r\n```\r\nFROM php:5.6-apache\r\nEXPOSE 80\r\nRUN docker-php-ext-install mysql\r\nADD index.php /var/www/html/index.php\r\n```\r\n\r\n* git2docker.conf\r\n```\r\nstate=Dockerfile\r\ndomain=apache.git2docker\r\n```\r\n\r\n* git2docker_db.conf\r\n```\r\nimage=mysql\r\nuser=dbuser\r\npassword=dbpass\r\ndatabase=dbname\r\n```\r\n\r\n* git2docker.sql \r\n\r\n_If this file exist, git2docker will execute sql._\r\n\r\n```\r\nDROP TABLE IF EXISTS employees;\r\nCREATE TABLE employees (id INT, first_name VARCHAR(20), last_name VARCHAR(30));\r\nINSERT INTO employees (id, first_name, last_name) VALUES (1, 'Bill', 'Doe');\r\nINSERT INTO employees (id, first_name, last_name) VALUES (2, 'Bob', 'Smith');\r\nINSERT INTO employees (id, first_name, last_name) VALUES (3, 'Jane', 'Doe');\r\n\r\n```\r\n\r\n\r\n* index.php\r\n\r\n```\r\n<?php\r\n$servername = \"database\";\r\n$username = \"dbuser\";\r\n$password = \"dbpass\";\r\n$dbname = \"dbname\";\r\n\r\n$link = mysql_connect($servername, $username, $password);\r\nmysql_select_db($dbname, $link);\r\nmysql_set_charset('UTF-8', $link);\r\n\r\n\r\n$result = mysql_query('SELECT * from employees') or die(mysql_error());\r\n \r\n$num_rows = mysql_num_rows($result);\r\n \r\nwhile($row = mysql_fetch_assoc($result)) {\r\n   echo $row['first_name'].' '.$row['last_name']; //etc...\r\n   echo \"<br>\";\r\n}\r\n?> \r\n```\r\n\r\n##Deploy Example App:\r\n```\r\ngit add --all\r\ngit commit -m \"build\"\r\ngit remote add git2docker user@192.168.100.56:demo-php\r\n\r\ngit push git2docker master\r\n```\r\n\r\n\r\n","google":"UA-62067022-1","note":"Don't delete this file! It's used internally to help with page regeneration."}